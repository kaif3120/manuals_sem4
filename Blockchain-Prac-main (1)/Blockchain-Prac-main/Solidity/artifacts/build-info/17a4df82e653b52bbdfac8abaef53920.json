{
	"id": "17a4df82e653b52bbdfac8abaef53920",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.0",
	"solcLongVersion": "0.5.0+commit.1d4f565a",
	"input": {
		"language": "Solidity",
		"sources": {
			"Blockchain/strings.sol": {
				"content": "pragma solidity ^0.5.0;\r\n\r\ncontract SolidityTest {\r\n\r\n    // Constructor\r\n    constructor() public {\r\n        // No initialization needed in this example\r\n    }\r\n\r\n    // Function to perform addition and return the result as a string\r\n    // Marked as `pure` since it does not interact with state variables\r\n    function getResult() public pure returns (string memory) {\r\n        uint a = 1;\r\n        uint b = 2;\r\n        uint result = a + b;\r\n        return integerToString(result);\r\n    }\r\n\r\n    // Function to convert an integer to a string\r\n    function integerToString(uint _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Blockchain/strings.sol": {
				"SolidityTest": {
					"abi": [
						{
							"constant": true,
							"inputs": [],
							"name": "getResult",
							"outputs": [
								{
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"Blockchain/strings.sol\":27:1029  contract SolidityTest {\r... */\n  mstore(0x40, 0x80)\n    /* \"Blockchain/strings.sol\":78:160  constructor() public {\r... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"Blockchain/strings.sol\":78:160  constructor() public {\r... */\n  pop\n    /* \"Blockchain/strings.sol\":27:1029  contract SolidityTest {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"Blockchain/strings.sol\":27:1029  contract SolidityTest {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0xde292789\n      eq\n      tag_2\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"Blockchain/strings.sol\":312:490  function getResult() public pure returns (string memory) {\r... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_3\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_3:\n        /* \"Blockchain/strings.sol\":312:490  function getResult() public pure returns (string memory) {\r... */\n      pop\n      tag_4\n      jump(tag_5)\n    tag_4:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x0\n        /* \"--CODEGEN--\":8:108   */\n    tag_6:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_7\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_6)\n    tag_7:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"Blockchain/strings.sol\":312:490  function getResult() public pure returns (string memory) {\r... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_9\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x1\n      dup4\n      0x20\n      sub\n      0x100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_9:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"Blockchain/strings.sol\":354:367  string memory */\n      0x60\n        /* \"Blockchain/strings.sol\":380:386  uint a */\n      0x0\n        /* \"Blockchain/strings.sol\":389:390  1 */\n      0x1\n        /* \"Blockchain/strings.sol\":380:390  uint a = 1 */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":401:407  uint b */\n      0x0\n        /* \"Blockchain/strings.sol\":410:411  2 */\n      0x2\n        /* \"Blockchain/strings.sol\":401:411  uint b = 2 */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":422:433  uint result */\n      0x0\n        /* \"Blockchain/strings.sol\":440:441  b */\n      dup2\n        /* \"Blockchain/strings.sol\":436:437  a */\n      dup4\n        /* \"Blockchain/strings.sol\":436:441  a + b */\n      add\n        /* \"Blockchain/strings.sol\":422:441  uint result = a + b */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":459:482  integerToString(result) */\n      tag_11\n        /* \"Blockchain/strings.sol\":475:481  result */\n      dup2\n        /* \"Blockchain/strings.sol\":459:474  integerToString */\n      tag_12\n        /* \"Blockchain/strings.sol\":459:482  integerToString(result) */\n      jump\t// in\n    tag_11:\n        /* \"Blockchain/strings.sol\":452:482  return integerToString(result) */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"Blockchain/strings.sol\":312:490  function getResult() public pure returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"Blockchain/strings.sol\":549:1026  function integerToString(uint _i) internal pure returns (string memory) {\r... */\n    tag_12:\n        /* \"Blockchain/strings.sol\":606:619  string memory */\n      0x60\n        /* \"Blockchain/strings.sol\":642:643  0 */\n      0x0\n        /* \"Blockchain/strings.sol\":636:638  _i */\n      dup3\n        /* \"Blockchain/strings.sol\":636:643  _i == 0 */\n      eq\n        /* \"Blockchain/strings.sol\":632:682  if (_i == 0) {\r... */\n      iszero\n      tag_14\n      jumpi\n        /* \"Blockchain/strings.sol\":660:670  return \"0\" */\n      0x40\n      dup1\n      mload\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      0x1\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n      jump(tag_13)\n        /* \"Blockchain/strings.sol\":632:682  if (_i == 0) {\r... */\n    tag_14:\n        /* \"Blockchain/strings.sol\":692:698  uint j */\n      0x0\n        /* \"Blockchain/strings.sol\":701:703  _i */\n      dup3\n        /* \"Blockchain/strings.sol\":692:703  uint j = _i */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":714:722  uint len */\n      0x0\n        /* \"Blockchain/strings.sol\":733:802  while (j != 0) {\r... */\n    tag_15:\n        /* \"Blockchain/strings.sol\":745:746  0 */\n      0x0\n        /* \"Blockchain/strings.sol\":740:741  j */\n      dup3\n        /* \"Blockchain/strings.sol\":740:746  j != 0 */\n      eq\n      iszero\n        /* \"Blockchain/strings.sol\":733:802  while (j != 0) {\r... */\n      iszero\n      tag_16\n      jumpi\n        /* \"Blockchain/strings.sol\":763:768  len++ */\n      dup1\n      dup1\n      0x1\n      add\n      swap2\n      pop\n      pop\n        /* \"Blockchain/strings.sol\":788:790  10 */\n      0xa\n        /* \"Blockchain/strings.sol\":783:790  j /= 10 */\n      dup3\n      dup2\n      iszero\n      iszero\n      tag_17\n      jumpi\n      invalid\n    tag_17:\n      div\n      swap2\n      pop\n        /* \"Blockchain/strings.sol\":733:802  while (j != 0) {\r... */\n      jump(tag_15)\n    tag_16:\n        /* \"Blockchain/strings.sol\":812:829  bytes memory bstr */\n      0x60\n        /* \"Blockchain/strings.sol\":842:845  len */\n      dup2\n        /* \"Blockchain/strings.sol\":832:846  new bytes(len) */\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_18\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:30   */\n      0x1\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:31   */\n      mul\n        /* \"--CODEGEN--\":116:120   */\n      dup1\n        /* \"--CODEGEN--\":104:114   */\n      codesize\n        /* \"--CODEGEN--\":96:102   */\n      dup4\n        /* \"--CODEGEN--\":87:121   */\n      codecopy\n        /* \"--CODEGEN--\":147:151   */\n      dup1\n        /* \"--CODEGEN--\":139:145   */\n      dup3\n        /* \"--CODEGEN--\":135:152   */\n      add\n        /* \"--CODEGEN--\":125:152   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:156   */\n      pop\n        /* \"Blockchain/strings.sol\":832:846  new bytes(len) */\n      swap1\n      pop\n    tag_18:\n      pop\n        /* \"Blockchain/strings.sol\":812:846  bytes memory bstr = new bytes(len) */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":857:863  uint k */\n      0x0\n        /* \"Blockchain/strings.sol\":872:873  1 */\n      0x1\n        /* \"Blockchain/strings.sol\":866:869  len */\n      dup4\n        /* \"Blockchain/strings.sol\":866:873  len - 1 */\n      sub\n        /* \"Blockchain/strings.sol\":857:873  uint k = len - 1 */\n      swap1\n      pop\n        /* \"Blockchain/strings.sol\":884:989  while (_i != 0) {\r... */\n    tag_19:\n        /* \"Blockchain/strings.sol\":897:898  0 */\n      0x0\n        /* \"Blockchain/strings.sol\":891:893  _i */\n      dup7\n        /* \"Blockchain/strings.sol\":891:898  _i != 0 */\n      eq\n      iszero\n        /* \"Blockchain/strings.sol\":884:989  while (_i != 0) {\r... */\n      iszero\n      tag_20\n      jumpi\n        /* \"Blockchain/strings.sol\":950:952  10 */\n      0xa\n        /* \"Blockchain/strings.sol\":945:947  _i */\n      dup7\n        /* \"Blockchain/strings.sol\":945:952  _i % 10 */\n      dup2\n      iszero\n      iszero\n      tag_21\n      jumpi\n      invalid\n    tag_21:\n      mod\n        /* \"Blockchain/strings.sol\":940:942  48 */\n      0x30\n        /* \"Blockchain/strings.sol\":940:952  48 + _i % 10 */\n      add\n        /* \"Blockchain/strings.sol\":927:954  bytes1(uint8(48 + _i % 10)) */\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"Blockchain/strings.sol\":915:919  bstr */\n      dup3\n        /* \"Blockchain/strings.sol\":920:923  k-- */\n      dup3\n      dup1\n      0x1\n      swap1\n      sub\n      swap4\n      pop\n        /* \"Blockchain/strings.sol\":915:924  bstr[k--] */\n      dup2\n      mload\n      dup2\n      lt\n      iszero\n      iszero\n      tag_22\n      jumpi\n      invalid\n    tag_22:\n      swap1\n      0x20\n      add\n      add\n        /* \"Blockchain/strings.sol\":915:954  bstr[k--] = bytes1(uint8(48 + _i % 10)) */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x0\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"Blockchain/strings.sol\":975:977  10 */\n      0xa\n        /* \"Blockchain/strings.sol\":969:977  _i /= 10 */\n      dup7\n      dup2\n      iszero\n      iszero\n      tag_23\n      jumpi\n      invalid\n    tag_23:\n      div\n      swap6\n      pop\n        /* \"Blockchain/strings.sol\":884:989  while (_i != 0) {\r... */\n      jump(tag_19)\n    tag_20:\n        /* \"Blockchain/strings.sol\":1013:1017  bstr */\n      dup2\n        /* \"Blockchain/strings.sol\":999:1018  return string(bstr) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"Blockchain/strings.sol\":549:1026  function integerToString(uint _i) internal pure returns (string memory) {\r... */\n    tag_13:\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a723058204a72c0535240c478e671546bea14e397dd0b36bcd670b596cf59e7f188437aec0029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610281806100206000396000f3fe608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063de29278914610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060019050600060029050600081830190506100f4816100fc565b935050505090565b60606000821415610144576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610250565b600082905060005b600082141515610172578080600101915050600a8281151561016a57fe5b04915061014c565b6060816040519080825280601f01601f1916602001820160405280156101a75781602001600182028038833980820191505090505b50905060006001830390505b60008614151561024857600a868115156101c957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561020457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561024057fe5b0495506101b3565b819450505050505b91905056fea165627a7a723058204a72c0535240c478e671546bea14e397dd0b36bcd670b596cf59e7f188437aec0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0xDE292789 EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B PUSH2 0xD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x80 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH1 0x2 SWAP1 POP PUSH1 0x0 DUP2 DUP4 ADD SWAP1 POP PUSH2 0xF4 DUP2 PUSH2 0xFC JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x144 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x250 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ ISZERO ISZERO PUSH2 0x172 JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH1 0xA DUP3 DUP2 ISZERO ISZERO PUSH2 0x16A JUMPI INVALID JUMPDEST DIV SWAP2 POP PUSH2 0x14C JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 SUB SWAP1 POP JUMPDEST PUSH1 0x0 DUP7 EQ ISZERO ISZERO PUSH2 0x248 JUMPI PUSH1 0xA DUP7 DUP2 ISZERO ISZERO PUSH2 0x1C9 JUMPI INVALID JUMPDEST MOD PUSH1 0x30 ADD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP3 DUP3 DUP1 PUSH1 0x1 SWAP1 SUB SWAP4 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x204 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP7 DUP2 ISZERO ISZERO PUSH2 0x240 JUMPI INVALID JUMPDEST DIV SWAP6 POP PUSH2 0x1B3 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0x4a PUSH19 0xC0535240C478E671546BEA14E397DD0B36BCD6 PUSH17 0xB596CF59E7F188437AEC00290000000000 ",
							"sourceMap": "27:1002:0:-;;;78:82;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:82:0;27:1002;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063de29278914610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060019050600060029050600081830190506100f4816100fc565b935050505090565b60606000821415610144576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610250565b600082905060005b600082141515610172578080600101915050600a8281151561016a57fe5b04915061014c565b6060816040519080825280601f01601f1916602001820160405280156101a75781602001600182028038833980820191505090505b50905060006001830390505b60008614151561024857600a868115156101c957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561020457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561024057fe5b0495506101b3565b819450505050505b91905056fea165627a7a723058204a72c0535240c478e671546bea14e397dd0b36bcd670b596cf59e7f188437aec0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0xDE292789 EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B PUSH2 0xD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x80 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC8 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH1 0x2 SWAP1 POP PUSH1 0x0 DUP2 DUP4 ADD SWAP1 POP PUSH2 0xF4 DUP2 PUSH2 0xFC JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x144 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x250 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ ISZERO ISZERO PUSH2 0x172 JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH1 0xA DUP3 DUP2 ISZERO ISZERO PUSH2 0x16A JUMPI INVALID JUMPDEST DIV SWAP2 POP PUSH2 0x14C JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 SUB SWAP1 POP JUMPDEST PUSH1 0x0 DUP7 EQ ISZERO ISZERO PUSH2 0x248 JUMPI PUSH1 0xA DUP7 DUP2 ISZERO ISZERO PUSH2 0x1C9 JUMPI INVALID JUMPDEST MOD PUSH1 0x30 ADD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP3 DUP3 DUP1 PUSH1 0x1 SWAP1 SUB SWAP4 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x204 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP7 DUP2 ISZERO ISZERO PUSH2 0x240 JUMPI INVALID JUMPDEST DIV SWAP6 POP PUSH2 0x1B3 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0x4a PUSH19 0xC0535240C478E671546BEA14E397DD0B36BCD6 PUSH17 0xB596CF59E7F188437AEC00290000000000 ",
							"sourceMap": "27:1002:0:-;;;;;;;;;;;;;;;;;;;;;;;;312:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;312:178:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;312:178:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;354:13;380:6;389:1;380:10;;401:6;410:1;401:10;;422:11;440:1;436;:5;422:19;;459:23;475:6;459:15;:23::i;:::-;452:30;;;;;312:178;:::o;549:477::-;606:13;642:1;636:2;:7;632:50;;;660:10;;;;;;;;;;;;;;;;;;;;;;632:50;692:6;701:2;692:11;;714:8;733:69;745:1;740;:6;;733:69;;;763:5;;;;;;;788:2;783:7;;;;;;;;;;;733:69;;;812:17;842:3;832:14;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;832:14:0;;;;812:34;;857:6;872:1;866:3;:7;857:16;;884:105;897:1;891:2;:7;;884:105;;;950:2;945;:7;;;;;;;;940:2;:12;927:27;;915:4;920:3;;;;;;;915:9;;;;;;;;;;;;;;:39;;;;;;;;;;;975:2;969:8;;;;;;;;;;;884:105;;;1013:4;999:19;;;;;;549:477;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "128200",
								"executionCost": "177",
								"totalCost": "128377"
							},
							"external": {
								"getResult()": "infinite"
							},
							"internal": {
								"integerToString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "MSTORE"
								},
								{
									"begin": 78,
									"end": 160,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 78,
									"end": 160,
									"name": "POP"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "DUP1"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "CODECOPY"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 1029,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a723058204a72c0535240c478e671546bea14e397dd0b36bcd670b596cf59e7f188437aec0029",
									".code": [
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "MSTORE"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "LT"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "SWAP1"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "DIV"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "AND"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "DE292789"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "EQ"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "JUMPDEST"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 1029,
											"name": "REVERT"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMPDEST"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMPDEST"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MLOAD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ADD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP3"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SUB"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP3"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MSTORE"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP4"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MLOAD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MSTORE"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ADD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MLOAD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ADD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP4"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ADD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "AND"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ISZERO"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMPI"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP3"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SUB"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MLOAD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP4"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SUB"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "EXP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SUB"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "NOT"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "AND"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MSTORE"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "ADD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMPDEST"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP3"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "MLOAD"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "DUP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP2"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SUB"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "RETURN"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMPDEST"
										},
										{
											"begin": 354,
											"end": 367,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 389,
											"end": 390,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 380,
											"end": 390,
											"name": "SWAP1"
										},
										{
											"begin": 380,
											"end": 390,
											"name": "POP"
										},
										{
											"begin": 401,
											"end": 407,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 410,
											"end": 411,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 401,
											"end": 411,
											"name": "SWAP1"
										},
										{
											"begin": 401,
											"end": 411,
											"name": "POP"
										},
										{
											"begin": 422,
											"end": 433,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 440,
											"end": 441,
											"name": "DUP2"
										},
										{
											"begin": 436,
											"end": 437,
											"name": "DUP4"
										},
										{
											"begin": 436,
											"end": 441,
											"name": "ADD"
										},
										{
											"begin": 422,
											"end": 441,
											"name": "SWAP1"
										},
										{
											"begin": 422,
											"end": 441,
											"name": "POP"
										},
										{
											"begin": 459,
											"end": 482,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 475,
											"end": 481,
											"name": "DUP2"
										},
										{
											"begin": 459,
											"end": 474,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 459,
											"end": 482,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 459,
											"end": 482,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 459,
											"end": 482,
											"name": "JUMPDEST"
										},
										{
											"begin": 452,
											"end": 482,
											"name": "SWAP4"
										},
										{
											"begin": 452,
											"end": 482,
											"name": "POP"
										},
										{
											"begin": 452,
											"end": 482,
											"name": "POP"
										},
										{
											"begin": 452,
											"end": 482,
											"name": "POP"
										},
										{
											"begin": 452,
											"end": 482,
											"name": "POP"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "SWAP1"
										},
										{
											"begin": 312,
											"end": 490,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "JUMPDEST"
										},
										{
											"begin": 606,
											"end": 619,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 642,
											"end": 643,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 636,
											"end": 638,
											"name": "DUP3"
										},
										{
											"begin": 636,
											"end": 643,
											"name": "EQ"
										},
										{
											"begin": 632,
											"end": 682,
											"name": "ISZERO"
										},
										{
											"begin": 632,
											"end": 682,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 632,
											"end": 682,
											"name": "JUMPI"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "DUP1"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "MLOAD"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "SWAP1"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "DUP2"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "ADD"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "MSTORE"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "DUP1"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "DUP2"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "MSTORE"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "ADD"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH",
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "DUP2"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "MSTORE"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "POP"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "SWAP1"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "POP"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 660,
											"end": 670,
											"name": "JUMP"
										},
										{
											"begin": 632,
											"end": 682,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 632,
											"end": 682,
											"name": "JUMPDEST"
										},
										{
											"begin": 692,
											"end": 698,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 701,
											"end": 703,
											"name": "DUP3"
										},
										{
											"begin": 692,
											"end": 703,
											"name": "SWAP1"
										},
										{
											"begin": 692,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 714,
											"end": 722,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "JUMPDEST"
										},
										{
											"begin": 745,
											"end": 746,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 740,
											"end": 741,
											"name": "DUP3"
										},
										{
											"begin": 740,
											"end": 746,
											"name": "EQ"
										},
										{
											"begin": 740,
											"end": 746,
											"name": "ISZERO"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "ISZERO"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "JUMPI"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "DUP1"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "DUP1"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "ADD"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "SWAP2"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "POP"
										},
										{
											"begin": 763,
											"end": 768,
											"name": "POP"
										},
										{
											"begin": 788,
											"end": 790,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "DUP3"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "DUP2"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "ISZERO"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "ISZERO"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "JUMPI"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "INVALID"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "JUMPDEST"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "DIV"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "SWAP2"
										},
										{
											"begin": 783,
											"end": 790,
											"name": "POP"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "JUMP"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 733,
											"end": 802,
											"name": "JUMPDEST"
										},
										{
											"begin": 812,
											"end": 829,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 842,
											"end": 845,
											"name": "DUP2"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "MLOAD"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "SWAP1"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP1"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP3"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "MSTORE"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP1"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "ADD"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "NOT"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "AND"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "ADD"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP3"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "ADD"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "MSTORE"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP1"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "ISZERO"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "JUMPI"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "DUP2"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 31,
											"name": "MUL"
										},
										{
											"begin": 116,
											"end": 120,
											"name": "DUP1"
										},
										{
											"begin": 104,
											"end": 114,
											"name": "CODESIZE"
										},
										{
											"begin": 96,
											"end": 102,
											"name": "DUP4"
										},
										{
											"begin": 87,
											"end": 121,
											"name": "CODECOPY"
										},
										{
											"begin": 147,
											"end": 151,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP3"
										},
										{
											"begin": 135,
											"end": 152,
											"name": "ADD"
										},
										{
											"begin": 125,
											"end": 152,
											"name": "SWAP2"
										},
										{
											"begin": 125,
											"end": 152,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 156,
											"name": "POP"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "SWAP1"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "POP"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "JUMPDEST"
										},
										{
											"begin": 832,
											"end": 846,
											"name": "POP"
										},
										{
											"begin": 812,
											"end": 846,
											"name": "SWAP1"
										},
										{
											"begin": 812,
											"end": 846,
											"name": "POP"
										},
										{
											"begin": 857,
											"end": 863,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 872,
											"end": 873,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 866,
											"end": 869,
											"name": "DUP4"
										},
										{
											"begin": 866,
											"end": 873,
											"name": "SUB"
										},
										{
											"begin": 857,
											"end": 873,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 873,
											"name": "POP"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "JUMPDEST"
										},
										{
											"begin": 897,
											"end": 898,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 891,
											"end": 893,
											"name": "DUP7"
										},
										{
											"begin": 891,
											"end": 898,
											"name": "EQ"
										},
										{
											"begin": 891,
											"end": 898,
											"name": "ISZERO"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "ISZERO"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "JUMPI"
										},
										{
											"begin": 950,
											"end": 952,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "DUP7"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "DUP2"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "ISZERO"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "ISZERO"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "JUMPI"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "INVALID"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "JUMPDEST"
										},
										{
											"begin": 945,
											"end": 952,
											"name": "MOD"
										},
										{
											"begin": 940,
											"end": 942,
											"name": "PUSH",
											"value": "30"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ADD"
										},
										{
											"begin": 927,
											"end": 954,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 927,
											"end": 954,
											"name": "MUL"
										},
										{
											"begin": 915,
											"end": 919,
											"name": "DUP3"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "DUP3"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "DUP1"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "SWAP1"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "SUB"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "SWAP4"
										},
										{
											"begin": 920,
											"end": 923,
											"name": "POP"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "DUP2"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "MLOAD"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "DUP2"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "LT"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "ISZERO"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "JUMPI"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "INVALID"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "JUMPDEST"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "ADD"
										},
										{
											"begin": 915,
											"end": 924,
											"name": "ADD"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "NOT"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "AND"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "DUP2"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "BYTE"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "SWAP1"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "MSTORE8"
										},
										{
											"begin": 915,
											"end": 954,
											"name": "POP"
										},
										{
											"begin": 975,
											"end": 977,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "DUP7"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "DUP2"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "ISZERO"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "ISZERO"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "JUMPI"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "INVALID"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "JUMPDEST"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "DIV"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "SWAP6"
										},
										{
											"begin": 969,
											"end": 977,
											"name": "POP"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "JUMP"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 884,
											"end": 989,
											"name": "JUMPDEST"
										},
										{
											"begin": 1013,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "SWAP5"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 999,
											"end": 1018,
											"name": "POP"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "JUMPDEST"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "SWAP2"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "SWAP1"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "POP"
										},
										{
											"begin": 549,
											"end": 1026,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"getResult()": "de292789"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"Blockchain/strings.sol\":\"SolidityTest\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Blockchain/strings.sol\":{\"keccak256\":\"0xf90b800e365388adca6e03015421f982e9c08b6809e5cba0156ea8ae4251eef5\",\"urls\":[\"bzzr://a806ab9df7a876f7ab73a7a28af1023121ae09945d61bf88c39605ee453b5b31\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"Blockchain/strings.sol": {
				"ast": {
					"absolutePath": "Blockchain/strings.sol",
					"exportedSymbols": {
						"SolidityTest": [
							105
						]
					},
					"id": 106,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 105,
							"linearizedBaseContracts": [
								105
							],
							"name": "SolidityTest",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 4,
										"nodeType": "Block",
										"src": "99:61:0",
										"statements": []
									},
									"documentation": null,
									"id": 5,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "89:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "99:0:0"
									},
									"scope": 105,
									"src": "78:82:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "369:121:0",
										"statements": [
											{
												"assignments": [
													11
												],
												"declarations": [
													{
														"constant": false,
														"id": 11,
														"name": "a",
														"nodeType": "VariableDeclaration",
														"scope": 28,
														"src": "380:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 10,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "380:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 13,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "31",
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "389:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "380:10:0"
											},
											{
												"assignments": [
													15
												],
												"declarations": [
													{
														"constant": false,
														"id": 15,
														"name": "b",
														"nodeType": "VariableDeclaration",
														"scope": 28,
														"src": "401:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 14,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "401:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 17,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "32",
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "410:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_2_by_1",
														"typeString": "int_const 2"
													},
													"value": "2"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "401:10:0"
											},
											{
												"assignments": [
													19
												],
												"declarations": [
													{
														"constant": false,
														"id": 19,
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 28,
														"src": "422:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 18,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "422:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 23,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 20,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "436:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 21,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "440:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "436:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "422:19:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 25,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "475:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 24,
														"name": "integerToString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 104,
														"src": "459:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "459:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 9,
												"id": 27,
												"nodeType": "Return",
												"src": "452:30:0"
											}
										]
									},
									"documentation": null,
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "330:2:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "354:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 7,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "354:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "353:15:0"
									},
									"scope": 105,
									"src": "312:178:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "621:405:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 36,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "636:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 37,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "642:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "636:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 42,
												"nodeType": "IfStatement",
												"src": "632:50:0",
												"trueBody": {
													"id": 41,
													"nodeType": "Block",
													"src": "645:37:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "667:3:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 35,
															"id": 40,
															"nodeType": "Return",
															"src": "660:10:0"
														}
													]
												}
											},
											{
												"assignments": [
													44
												],
												"declarations": [
													{
														"constant": false,
														"id": 44,
														"name": "j",
														"nodeType": "VariableDeclaration",
														"scope": 103,
														"src": "692:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 43,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "692:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 46,
												"initialValue": {
													"argumentTypes": null,
													"id": 45,
													"name": "_i",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 31,
													"src": "701:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "692:11:0"
											},
											{
												"assignments": [
													48
												],
												"declarations": [
													{
														"constant": false,
														"id": 48,
														"name": "len",
														"nodeType": "VariableDeclaration",
														"scope": 103,
														"src": "714:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 47,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "714:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 49,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "714:8:0"
											},
											{
												"body": {
													"id": 60,
													"nodeType": "Block",
													"src": "748:54:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "763:5:0",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 53,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 48,
																	"src": "763:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 55,
															"nodeType": "ExpressionStatement",
															"src": "763:5:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 58,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 56,
																	"name": "j",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "783:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "3130",
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "788:2:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "783:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 59,
															"nodeType": "ExpressionStatement",
															"src": "783:7:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 52,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 50,
														"name": "j",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 44,
														"src": "740:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 51,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "745:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "740:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 61,
												"nodeType": "WhileStatement",
												"src": "733:69:0"
											},
											{
												"assignments": [
													63
												],
												"declarations": [
													{
														"constant": false,
														"id": 63,
														"name": "bstr",
														"nodeType": "VariableDeclaration",
														"scope": 103,
														"src": "812:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 62,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "812:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 68,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 66,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 48,
															"src": "842:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 65,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "832:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 64,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "836:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "832:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "812:34:0"
											},
											{
												"assignments": [
													70
												],
												"declarations": [
													{
														"constant": false,
														"id": 70,
														"name": "k",
														"nodeType": "VariableDeclaration",
														"scope": 103,
														"src": "857:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 69,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "857:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 74,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 71,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "866:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "872:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "866:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "857:16:0"
											},
											{
												"body": {
													"id": 97,
													"nodeType": "Block",
													"src": "900:89:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 91,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 78,
																		"name": "bstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 63,
																		"src": "915:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 81,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "920:3:0",
																		"subExpression": {
																			"argumentTypes": null,
																			"id": 79,
																			"name": "k",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 70,
																			"src": "920:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "915:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 88,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"argumentTypes": null,
																						"hexValue": "3438",
																						"id": 84,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "940:2:0",
																						"subdenomination": null,
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"argumentTypes": null,
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 87,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"argumentTypes": null,
																							"id": 85,
																							"name": "_i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 31,
																							"src": "945:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "%",
																						"rightExpression": {
																							"argumentTypes": null,
																							"hexValue": "3130",
																							"id": 86,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "950:2:0",
																							"subdenomination": null,
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_10_by_1",
																								"typeString": "int_const 10"
																							},
																							"value": "10"
																						},
																						"src": "945:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "940:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 83,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "934:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": "uint8"
																			},
																			"id": 89,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "934:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 82,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "927:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": "bytes1"
																	},
																	"id": 90,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "927:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "915:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 92,
															"nodeType": "ExpressionStatement",
															"src": "915:39:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 93,
																	"name": "_i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 31,
																	"src": "969:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "3130",
																	"id": 94,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "975:2:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "969:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 96,
															"nodeType": "ExpressionStatement",
															"src": "969:8:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 75,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "891:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "897:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "891:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 98,
												"nodeType": "WhileStatement",
												"src": "884:105:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 100,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "1013:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 99,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1006:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": "string"
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1006:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 35,
												"id": 102,
												"nodeType": "Return",
												"src": "999:19:0"
											}
										]
									},
									"documentation": null,
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "integerToString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"name": "_i",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "574:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 30,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "574:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "573:9:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "606:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 33,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "606:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "605:15:0"
									},
									"scope": 105,
									"src": "549:477:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 106,
							"src": "27:1002:0"
						}
					],
					"src": "0:1031:0"
				},
				"id": 0
			}
		}
	}
}